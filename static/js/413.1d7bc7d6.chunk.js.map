{"version":3,"file":"static/js/413.1d7bc7d6.chunk.js","mappings":"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","sources":["config/constants/NFts.ts","Pages/NFTpage/Utilities.tsx","Pages/NFTpage/styled.tsx","utils/callHelpers.ts","utils/web3.ts","utils/addressHelpers.ts","utils/contractHelpers.ts","hooks/useWeb3.ts","contexts/RefreshContext.tsx","hooks/useRefresh.ts","utils/wallet.ts","hooks/useAuth.ts","components/UnlockButton/index.tsx","utils/nftHelpers.ts","utils/bigNumber.ts","utils/formatBalance.ts","Pages/NFTpage/NFT.tsx","hooks/usePFPNft.ts"],"sourcesContent":["import Nft1 from 'assets/Nft/1.png'\nimport Nft2 from 'assets/Nft/2.png'\nimport Nft3 from 'assets/Nft/3.png'\nimport Nft4 from 'assets/Nft/4.png'\nimport Nft5 from 'assets/Nft/5.png'\nimport Nft6 from 'assets/Nft/6.png'\nimport Nft7 from 'assets/Nft/7.png'\nimport Nft8 from 'assets/Nft/8.png'\nimport Nft9 from 'assets/Nft/9.png'\nimport Nft10 from 'assets/Nft/10.png'\nimport Nft11 from 'assets/Nft/11.png'\nimport Nft12 from 'assets/Nft/12.png'\n\n\nconst nfts = [\n  Nft1,\n  Nft2,\n  Nft3,\n  Nft4,\n  Nft5,\n  Nft6,\n  Nft7,\n  Nft8,\n  Nft9,\n  Nft10,\n  Nft11,\n  Nft12,\n]\n\nexport default nfts\n\n\nexport const nftUtilities: string[] = [\n  'Staking',\n  'Priority entry to early-bird events & pre-sale spots',\n  'Privilege access to Genesis Sale, IGOs, INOs & more',\n  'Discounts on Mystery Boxes',\n  \"MetaSaga Warriors' Guess The Diggler promo x2 raffle entry\",\n  'Exclusive offers, bonuses & rewards',\n  'Access to a variety of future unlocks',\n  'Merchandise redemption & giveaways',\n  'Voting power for in-person events',\n  'Holders get a physical card as a \"proof-of-mint\" token to be used as a ticket in future IRL events'\n]\n\nexport const LaunchDateEpoch = 1660521600000;","import React from \"react\";\nimport { Flex, Heading, Text } from \"@metagg/mgg-uikit\";\nimport { nftUtilities } from \"config/constants/NFts\";\nimport styled from \"styled-components\";\n\nconst Section: React.FC = () => {\n  return (\n    <Container>\n      <Text\n        className=\"center\"\n        fontSize=\"3.5em\"\n        bold\n        color=\"primary\"\n        style={{ letterSpacing: \"5px\" }}\n      >\n        10 Utilities of MetaGaming NFTs\n      </Text>\n      <Ol>\n        {nftUtilities.map((text) => (\n          <Li key={text}>{text}</Li>\n        ))}\n      </Ol>\n    </Container>\n  );\n};\n\nexport default Section;\n\nconst Ol = styled.ol`\n  color: white;\n  font-size: 1.5em;\n  list-style-type: decimal;\n  counter-reset: item;\n  line-height: 1.5;\n  list-style-position: revert;\n`;\nconst Li = styled.li`\n  padding: 1rem 0 0 1rem;\n  margin-left: 2rem;\n  &::marker {\n    content: item;\n    counter-increment: item;\n    font-weight: bold;\n    color: #00b6ff;\n    width: 1rem;\n    margin-right: 1.5rem;\n  }\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  text-align: left;\n  margin: 0rem 0px 5rem 0px;\n  padding: 2.5rem;\n  background-color: rgba(12, 1, 44, 1);\n  background-image: url(\"/nft/groupdna.png\");\n  background-repeat: no-repeat;\n  background-position: right;\n  background-size: 50%;\n  font-size: 12px;\n  & .center {\n    text-align: center;\n    ${({ theme }) => theme.mediaQueries.md} {\n      text-align: left;\n    }\n  }\n  ${({ theme }) => theme.mediaQueries.md} {\n    font-size: 17px;\n    padding: 5rem;\n    min-height: 50vh;\n    background-size: contain;\n  }\n`;\n","import styled from 'styled-components'\nimport { Flex, Heading, Button } from '@metagg/mgg-uikit'\nimport BGimage from '../../assets/background/BG2.png'\n\nexport const Card = styled.div`\n  background-color: #0c012c;\n  border: #008ffd 0.15rem solid;\n  border-radius: 0.5rem;\n  padding: 3rem;\n  -moz-box-shadow: inset 0 0 2rem #000000, 0 0.3rem 0.5rem #008ffd;\n  -webkit-box-shadow: inset 0 0 2rem #000000, 0 0.3rem 0.5rem #008ffd;\n  box-shadow: inset 0 0 2rem #000000, 0 0.3rem 0.5rem #008ffd;\n  z-index: 3;\n  margin: 2rem;\n  text-align: center;\n`\n\nexport const Btn = styled(Button)`\n  border-radius: 2rem;\n  width: 250px;\n  background-color: rgb(0, 196, 204);\n  color: black;\n  box-shadow: 0px 5px 8px #a5630057;\n`\n\nexport const InformativeButton = styled.button<{background?:string; borderColor?:string}>`\n  width: 250px;\n  height: 45px;\n  margin: 0.5rem 0;\n  ${({background, borderColor}) => `\n    border: 1px solid ${borderColor};\n    background-color: ${background};\n  `} \n  color: ${({theme}) => theme.colors.text};\n  font-weight: bold;\n\n  ${({theme}) => theme.mediaQueries.md} {\n    margin: 0 0.5rem;\n  }\n\n`\n\nexport const CardContainer = styled.div`\n  flex: 1;\n  max-width: 26rem;\n  min-width: 16rem;\n  position: relative;\n`\n\nexport const RdmapList = styled.ul`\n  text-align: left;\n  color: white;\n  list-style-type: none;\n  line-height: 1.5;\n  font-weight: 400;\n`\n\nexport const CheckList = styled.li`\n  padding: 1rem 0 0 1rem;\n  &:before{\n    content: \"✔\";\n    color: #06ff65;\n    font-weight: bold;\n    display: inline-block;\n    width: 1rem;\n    margin-left: -1rem;\n  }\n`\n\nexport const List = styled.li`\n  padding: 1rem 0 0 1rem;\n  &:before{\n    content: \"●\";\n    color: #fdda00;\n    font-weight: bold;\n    display: inline-block;\n    width: 1rem;\n    margin-left: -1rem;\n  }\n`\n\nexport const BgPage = styled.div<{padding?: string}>`\n  padding: ${({padding}) => padding ? padding: '5rem 0'};\n  text-align: center;\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  & .pad-5rem {\n    padding: 10rem;\n\n    @media screen and (max-width: 500px) {\n      padding: 5rem 0;\n    }\n  }\n\n  &:before {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 0;\n    background-image: url(${BGimage});\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: cover;\n  }\n\n  @media screen and (max-width: 500px) {\n    padding: 0.5rem;\n  }\n`\n\nexport const RdmapCards = styled(Flex)`\n  margin: 2rem 0 0 0;\n  flex-flow: row wrap;\n  column-gap: 1rem;\n  row-gap: 3rem;\n  justify-content: center;\n  align-items: baseline;\n  position: relative;\n\n  @media (max-width: 1280px) {\n    flex-flow: column wrap;\n    justify-content: center;\n    align-items: center;\n  }\n`\n\nexport const HeadingGlow = styled(Heading)<{ glow?: string }>`\n  text-shadow: 0 0 0.5rem ${({ glow }) => (glow ??'#00f4fd')};\n`\n\nexport const Line = styled.div`\n  width: 10%;\n  background-color: rgb(253,218,0);\n  z-index: 0;\n  position: absolute;\n  top: 5rem;\n  left: 100%;\n  border: solid #fdda00;\n  box-shadow: 0 0 1rem #fdda00;\n\n  @media (max-width: 1280px) {\n    width: 0.1rem;\n    left: 50%;\n    top: 100%;\n    height: 15%;\n  }\n`","import {getDecimalAmount} from \"./formatBalance\";\n\nexport const mint = async (tokenContract, account, amount) => {\n    return tokenContract.methods\n        .buyNFT()\n        .send({from: account, value: amount})\n        .on('transactionHash', (tx) => {\n            return tx.transactionHash\n        })\n}\n\n","import Web3 from 'web3'\nimport {HttpProviderOptions} from 'web3-core-helpers'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nexport const getWeb3NoAccount = (chainId, web3?: Web3) => {\n    const RPC_URL2 = getRpcUrl(chainId)\n    const provider = new Web3.providers.HttpProvider(RPC_URL2, { timeout: 10000 } as HttpProviderOptions)\n\n    return new Web3(provider)\n}\n","import {MAINNET_CHAIN_ID, MAINNET_ETH_CHAIN_ID} from 'config'\nimport {Address} from 'config/constants/types'\n\nexport const getAddress = (address: Address, chainId = MAINNET_ETH_CHAIN_ID): string => {\n    return address[chainId]\n}\n\nexport const getPFPNftAddress = (chainId = MAINNET_ETH_CHAIN_ID) => {\n    return getAddress({\n        1: '0xE716f661051C026bc9fE40bca5F8443aCe5a7b13',\n        4: '0xaA71113164F2c1E2f1c7Eb29Fa828501B9D1ca05'\n    }, chainId)\n}\n","import Web3 from 'web3'\nimport {AbiItem} from 'web3-utils'\nimport {getWeb3NoAccount} from 'utils/web3'\n\n// Addresses\n// ABI\nimport bep20Abi from 'config/abi/erc20.json'\nimport erc721Abi from 'config/abi/erc721.json'\nimport mggExtAbi from 'config/abi/mggExt.json'\nimport {getPFPNftAddress} from \"./addressHelpers\";\nimport {MAINNET_ETH_CHAIN_ID} from \"../config\";\nimport mggNftAbi from \"../config/abi/mggNft.json\";\n\nexport const getContract = (abi: any, address: string, chainId: string = MAINNET_ETH_CHAIN_ID, web3?: Web3) => {\n    const _web3 = web3 ?? getWeb3NoAccount(chainId?.toString())\n    // const gasPrice = account ? getSettings(account).gasPrice : getDefaultGasPrice()\n\n    return new _web3.eth.Contract(abi as unknown as AbiItem, address)\n}\n\nexport const getBep20Contract = (address: string, chainId = MAINNET_ETH_CHAIN_ID, web3?: Web3) => {\n    return getContract(bep20Abi, address, chainId, web3)\n}\n\nexport const getErc721Contract = (address: string, chainId = MAINNET_ETH_CHAIN_ID, web3?: Web3) => {\n    return getContract(erc721Abi, address, chainId, web3)\n}\n\nexport const getPFPNftContract = (chainId: string = MAINNET_ETH_CHAIN_ID, web3?: Web3) => {\n    return getContract(mggExtAbi, getPFPNftAddress(chainId), chainId, web3)\n}\n\nexport const getMGGNftContract = (nftAddress, chainId: string = MAINNET_ETH_CHAIN_ID, web3?: Web3) => {\n    return getContract(mggNftAbi, nftAddress, chainId, web3)\n}\n\n","import {useEffect, useRef, useState} from 'react'\nimport Web3 from 'web3'\nimport {useWeb3React} from '@web3-react/core'\nimport {getWeb3NoAccount} from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n    const {library, chainId} = useWeb3React()\n    const refEth = useRef(library)\n    const web3NoAccount = getWeb3NoAccount(chainId?.toString())\n    const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount)\n\n    useEffect(() => {\n        if (library !== refEth.current) {\n            setweb3(library ? new Web3(library) : web3NoAccount)\n            refEth.current = library\n        }\n    }, [library])\n\n    return web3\n}\n\nexport default useWeb3\n","import React, { useState, useEffect } from 'react'\nimport useTabVisibility from 'hooks/useTabVisibility'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n  const { tabVisibleRef } = useTabVisibility()\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (tabVisibleRef.current) {\n        setFast((prev) => prev + 1)\n      }\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [tabVisibleRef])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (tabVisibleRef.current) {\n        setSlow((prev) => prev + 1)\n      }\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [tabVisibleRef])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","import {useContext} from 'react'\nimport {RefreshContext} from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n    const {fast, slow} = useContext(RefreshContext)\n    return {fastRefresh: fast, slowRefresh: slow}\n}\n\nexport default useRefresh\n","// Set of helper functions to facilitate wallet setup\n\nimport { BASE_BSC_SCAN_URL, MAINNET_ETH_CHAIN_ID } from 'config'\nimport { nodes } from './getRpcUrl'\n\n/**\n * Prompt the user to add BSC as a network on Metamask, or switch to BSC if the wallet is on a different network\n * @returns {boolean} true if the setup succeeded, false otherwise\n */\nexport const setupNetwork = async () => {\n  const provider = (window as WindowChain).ethereum\n  if (provider) {\n    const chainId = parseInt(process.env.REACT_APP_CHAIN_ID ?? '', 10)\n    try {\n      await provider.request({\n        method: 'wallet_addEthereumChain',\n        params: [\n          {\n            chainId: `0x${chainId.toString(16)}`,\n            chainName: 'Binance Smart Chain Testnet',\n            nativeCurrency: {\n              name: 'BNB',\n              symbol: 'bnb',\n              decimals: 18,\n            },\n            rpcUrls: nodes,\n            blockExplorerUrls: [`${BASE_BSC_SCAN_URL}/`],\n          },\n        ],\n      })\n      return true\n    } catch (error) {\n      console.error(error)\n      return false\n    }\n  } else {\n    console.error(\"Can't setup the BSC network on metamask because window.ethereum is undefined\")\n    return false\n  }\n}\n\nexport const switchNetwork = async (chainId) => {\n  const provider = (window as WindowChain).ethereum\n  if (provider) {\n    let networkData\n    switch (chainId) {\n      case 97:\n      case '97':\n        networkData = [\n          {\n            chainId: '0x61',\n            chainName: 'BSCTESTNET',\n            rpcUrls: ['https://data-seed-prebsc-1-s1.binance.org:8545'],\n            nativeCurrency: {\n              name: 'BINANCE COIN',\n              symbol: 'BNB',\n              decimals: 18,\n            },\n            blockExplorerUrls: ['https://testnet.bscscan.com/'],\n          },\n        ]\n        break\n      case 56:\n      case '56':\n        networkData = [\n          {\n            chainId: '0x38',\n            chainName: 'BSCMAINET',\n            rpcUrls: ['https://bsc-dataseed1.binance.org'],\n            nativeCurrency: {\n              name: 'BINANCE COIN',\n              symbol: 'BNB',\n              decimals: 18,\n            },\n            blockExplorerUrls: ['https://testnet.bscscan.com/'],\n          },\n        ]\n        break\n      default:\n        break\n    }\n    try {\n      if (chainId === MAINNET_ETH_CHAIN_ID) {\n        provider.request({ method: 'wallet_switchEthereumChain', params: [{ chainId: '0x1' }] })\n        return true\n      }\n      await provider.request({\n        method: 'wallet_addEthereumChain',\n        params: networkData,\n      })\n      return true\n    } catch (error) {\n      console.error(error)\n      return false\n    }\n  } else {\n    console.error(\"Can't setup the BSC network on metamask because window.ethereum is undefined\")\n    return false\n  }\n}\n\n/**\n * Prompt the user to add a custom token to metamask\n * @param tokenAddress\n * @param tokenSymbol\n * @param tokenDecimals\n * @param tokenImage\n * @returns {boolean} true if the token has been added, false otherwise\n */\n// export const registerToken = async (\n//   tokenAddress: string,\n//   tokenSymbol: string,\n//   tokenDecimals: number,\n//   tokenImage: string,\n// ) => {\n//   const tokenAdded = await (window as WindowChain).ethereum.request({\n//     method: 'wallet_watchAsset',\n//     params: {\n//       type: 'ERC20',\n//       options: {\n//         address: tokenAddress,\n//         symbol: tokenSymbol,\n//         decimals: tokenDecimals,\n//         image: tokenImage,\n//       },\n//     },\n//   })\n\n//   return tokenAdded\n// }","import { useCallback } from \"react\";\nimport { useWeb3React, UnsupportedChainIdError } from \"@web3-react/core\";\nimport { NoBscProviderError } from \"@binance-chain/bsc-connector\";\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected,\n} from \"@web3-react/injected-connector\";\nimport {\n  UserRejectedRequestError as UserRejectedRequestErrorWalletConnect,\n  WalletConnectConnector,\n} from \"@web3-react/walletconnect-connector\";\n// import { ConnectorNames, connectorLocalStorageKey } from '@pancakeswap/uikit'\nimport { ConnectorId } from \"@metagg/mgg-uikit\";\nimport { connectorsByName } from \"utils/web3React\";\nimport { setupNetwork } from \"utils/wallet\";\n// import useToast from 'hooks/useToast'\n// import { profileClear } from 'state/profile'\n// import { useAppDispatch } from 'state'\n// import { useTranslation } from 'contexts/Localization'\n\nconst useAuth = () => {\n  // const { t } = useTranslation()\n  // const dispatch = useAppDispatch()\n  const { activate, deactivate } = useWeb3React();\n  // const { toastError } = useToast()\n\n  const login = useCallback(\n    (connectorID: ConnectorId) => {\n      const connector = connectorsByName[connectorID];\n      if (connector) {\n        activate(connector, async (error: Error) => {\n          if (error instanceof UnsupportedChainIdError) {\n            const hasSetup = await setupNetwork();\n            if (hasSetup) {\n              activate(connector);\n            }\n          } else {\n            window.localStorage.removeItem(\"1\");\n            if (\n              error instanceof NoEthereumProviderError ||\n              error instanceof NoBscProviderError\n            ) {\n              console.info(\"Provider Error\", \"No provider was found\");\n            } else if (\n              error instanceof UserRejectedRequestErrorInjected ||\n              error instanceof UserRejectedRequestErrorWalletConnect\n            ) {\n              if (connector instanceof WalletConnectConnector) {\n                const walletConnector = connector as WalletConnectConnector;\n                walletConnector.walletConnectProvider = undefined;\n              }\n              console.info(\n                \"Authorization Error\",\n                \"Please authorize to access your account\"\n              );\n            } else {\n              console.error(error.name, error.message);\n            }\n          }\n        });\n      } else {\n        console.info(\n          \"Unable to find connector\",\n          \"The connector config is wrong\"\n        );\n      }\n    },\n    [activate]\n  );\n\n  const logout = useCallback(() => {\n    // dispatch(profileClear())\n    deactivate();\n    // This localStorage key is set by @web3-react/walletconnect-connector\n    if (window.localStorage.getItem(\"walletconnect\")) {\n      connectorsByName.walletconnect.close();\n      connectorsByName.walletconnect.walletConnectProvider = null;\n    }\n  }, [deactivate]);\n\n  return { login, logout };\n};\n\nexport default useAuth;\n","import React from 'react'\nimport { Button, useWalletModal } from '@metagg/mgg-uikit'\nimport useAuth from 'hooks/useAuth'\nimport { useWeb3React } from '@web3-react/core'\n\nconst UnlockButton = (props) => {\n  const { customTitle } = props\n  const { login, logout } = useAuth()\n  const { account } = useWeb3React()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return !account? (\n    <Button onClick={(onPresentConnectModal)} {...props}>\n      {!customTitle ? 'Connect Wallet' : customTitle}\n    </Button>\n  ) : (\n    <Button onClick={() => logout()}>\n      { account }\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","export const getOpenSeaUrl = (chainId, nftAddress, tokenId) => {\n    switch (chainId) {\n        case '1':\n            return `https://opensea.io/assets/ethereum/${nftAddress}/${tokenId}`\n        case '4':\n            return `https://testnets.opensea.io/assets/rinkeby/${nftAddress}/${tokenId}`\n        default:\n            return `https://opensea.io/assets/ethereum/${nftAddress}/${tokenId}`\n    }\n}\n\nexport const openInNewTab = (url) => {\n    const win = window.open(url, '_blank')\n    if (win) {\n        win.focus();\n    }\n}\n","import BigNumber from 'bignumber.js'\n\nexport const BIG_ZERO = new BigNumber(0)\nexport const BIG_ONE = new BigNumber(1)\nexport const BIG_NINE = new BigNumber(9)\nexport const BIG_TEN = new BigNumber(10)\n","import BigNumber from 'bignumber.js'\nimport {BIG_TEN} from './bigNumber'\n\n/**\n * Take a formatted amount, e.g. 15 BNB and convert it to full decimal value, e.g. 15000000000000000\n */\nexport const toBigNumber = (amount: string) => {\n    return new BigNumber(amount)\n}\n\n/**\n * Take a formatted amount, e.g. 15 BNB and convert it to full decimal value, e.g. 15000000000000000\n */\nexport const getDecimalAmount = (amount: BigNumber, decimals = 18) => {\n    return new BigNumber(amount).times(BIG_TEN.pow(decimals))\n}\n\nexport const getBalanceAmount = (amount: BigNumber, decimals = 18) => {\n    return new BigNumber(amount).dividedBy(BIG_TEN.pow(decimals))\n}\n\n/**\n * This function is not really necessary but is used throughout the site.\n */\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n    return getBalanceAmount(balance, decimals).toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, decimalsToAppear?: number) => {\n    return getBalanceAmount(balance, decimals).toFixed(decimalsToAppear)\n}\n\nexport const formatNumber = (number: number, minPrecision = 2, maxPrecision = 2) => {\n    const options = {\n        minimumFractionDigits: minPrecision,\n        maximumFractionDigits: maxPrecision,\n    }\n    return number.toLocaleString(undefined, options)\n}\n","import React, {useCallback, useContext, useState} from 'react'\nimport {Flex, Heading, Text} from '@metagg/mgg-uikit'\nimport styled, {ThemeContext} from 'styled-components'\nimport Page from 'components/layout/Page'\nimport Utilities from './Utilities'\nimport nftbg from '../../assets/Nft/nftbg.png'\nimport NftsGif from '../../assets/Nft/NFT.gif'\nimport {BgPage, Btn, Card, HeadingGlow, InformativeButton} from './styled'\nimport {useGetPublicInfo, useGetUserInfo, useMint} from \"../../hooks/usePFPNft\";\nimport {useWeb3React} from \"@web3-react/core\";\nimport UnlockButton from \"../../components/UnlockButton\";\nimport useToast from \"../../hooks/useToast\";\nimport {getOpenSeaUrl} from \"../../utils/nftHelpers\";\nimport useWeb3 from \"../../hooks/useWeb3\";\nimport {getBalanceAmount, getBalanceNumber, toBigNumber} from \"../../utils/formatBalance\";\n\n\nconst BadgesContainer = styled(Flex)`\n  flex-flow: column;\n  gap: 1rem;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n\n  &:before {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    z-index: -1;\n    background-image: url(${nftbg});\n    background-repeat: no-repeat;\n    // background-position: center;\n    background-size: cover;\n  }\n\n  @media screen and (max-width: 1000px) {\n    flex-flow: column;\n  }\n`\n\nconst BadgesDesc = styled.div`\n  max-width: 35rem;\n  @media screen and (max-width: 1000px) {\n    max-width: 100%;\n  }\n`\n\nconst DescText = styled.div`\n  text-align: center;\n  @media screen and (max-width: 1000px) {\n    text-align: center;\n  }\n`\n\nconst InfoSection = styled(Flex)`\n  flex-flow: column;\n\n  ${({theme}) => theme.mediaQueries.md} {\n    flex-flow: row;\n  }\n`\n\nconst NFTpage: React.FC = () => {\n    const theme = useContext(ThemeContext)\n    const {account, chainId} = useWeb3React()\n    const web3 = useWeb3()\n    const [requestedMint, setRequestMint] = useState(false)\n    const {buyEnabled} = useGetUserInfo()\n    const {toastSuccess} = useToast()\n\n    const {\n        totalSupply,\n        maxSupply,\n        nftAddress,\n        currentPhase,\n        price,\n        startTime,\n        endTime,\n    } = useGetPublicInfo()\n\n    const {onMint} = useMint(price)\n\n    const {\n        phase1Enabled,\n        phase2Enabled,\n        phase3Enabled\n    } = {\n        phase1Enabled: currentPhase === '1',\n        phase2Enabled: currentPhase === '2',\n        phase3Enabled: currentPhase === '3'\n    }\n\n    const handleMint = useCallback(async () => {\n        try {\n            setRequestMint(true)\n            const txHash = await onMint()\n            const tokenId = web3.utils.hexToNumber(txHash.events[0].raw.topics[3])\n            const tokenAddress = txHash.events[0].address\n            const openSeaUrl = getOpenSeaUrl(chainId?.toString(), tokenAddress, tokenId)\n            setTimeout(() => {\n                setRequestMint(false)\n                toastSuccess(`NFT Minted!`, <a href={openSeaUrl} target=\"_blank\"\n                                               style={{color: theme.colors.MGG_accent2}}>To check your minted NFT,\n                    please click here</a>)\n            }, 4000)\n        } catch (e) {\n            setRequestMint(false)\n            console.error(e)\n        }\n    }, [onMint])\n    return (\n        <>\n            <Page>\n                <BgPage padding='0'>\n                    <div style={{position: 'relative', zIndex: 2}}>\n                        <BadgesContainer className='pad-5rem'>\n                            <BadgesDesc>\n                                <DescText>\n                                    <HeadingGlow size='xl' color='#fdda00' glow=\"#fdda00\">MINT IS LIVE!</HeadingGlow>\n                                    <br/>\n                                    <br/>\n                                    <Heading size='lg' color={theme.colors.MGG_accent2}>Limited edition MetaGaming Guild\n                                        PFP NFTs</Heading>\n                                    <br/>\n                                    <br/>\n                                    <Text>The opportunity to own the first PFP NFTs in MetaGaming Guild has\n                                        arrived!</Text>\n                                    <br/>\n                                    <br/>\n                                    <Text color='textSubtle'>MetaGaming NFTs are rare collectible PFP NFTs in the\n                                        MetaGaming Guild ecosystem. A total of 5,000 individually designed NFTs will be\n                                        up for grabs on August 2022.</Text>\n                                </DescText>\n                            </BadgesDesc>\n\n                            <InfoSection alignItems='center' justifyContent='center' margin='1rem 0 0 0'>\n                                <InformativeButton disabled={phase1Enabled}\n                                                   background={phase1Enabled ? '#037b14' : '#012c07'}\n                                                   borderColor='#054824'>Allowlist -\n                                    0.07E</InformativeButton>\n                                {/* <InformativeButton disabled={phase2Enabled}\n                                                   background={phase2Enabled ? '#958e03' : '#2d2b02'}\n                                                   borderColor='#515022'>Waitlist -\n                                    0.09E</InformativeButton> */}\n                                <InformativeButton disabled={phase3Enabled}\n                                                   background={phase3Enabled ? '#9e0205' : '#2d0102'}\n                                                   borderColor='#73102f'>General Public -\n                                    0.09E</InformativeButton>\n                            </InfoSection>\n\n                            {/* <Btn disabled style={{margin: '3rem 0 0 0'}}>BUY A LIMITED EDITION MGG NFT</Btn> */}\n                            {account ?\n                                <Btn disabled={requestedMint || !buyEnabled} onClick={handleMint}\n                                     style={{margin: '3rem 0 0 0'}}>MINT</Btn>\n                                : <UnlockButton style={{margin: '3rem 0 0 0'}}/>\n                            }\n                            {/* <Flex>\n                <div>\n                <img style={{display: 'block', width: 'auto', height: 'auto', maxHeight: '35rem'}} src={Nfts}/>\n                </div>\n              </Flex> */}\n                        </BadgesContainer>\n                        <Utilities/>\n                        <div style={{margin: '5rem 0 0 0'}} className='pad-5rem'>\n                            <HeadingGlow size='xl' color='#fdda00' glow=\"#fdda00\">Flex and Show Off Your MGG\n                                NFTs!</HeadingGlow>\n                            <br/>\n                            <br/>\n                            <Heading size='l'>Each of these MetaGaming NFTs holds digital rarity, exclusive privileges\n                                and special utilities that can maximize your benefits in the MetaGaming Guild\n                                ecosystem.</Heading>\n                            <br/>\n                            <br/>\n                            {/* <Text>What's in it for you: special ranks; exclusive offers & discounts; privileged access; bonus unlocks; redemption values and MORE!</Text> */}\n                            <Flex style={{justifyContent: 'center'}}>\n                                <div>\n                                    <img style={{display: 'block', width: 'auto', height: 'auto', maxHeight: '20rem'}}\n                                         src={NftsGif}/>\n                                </div>\n                            </Flex>\n\n                            <Card>\n                                <Flex style={{flexFlow: 'row wrap', columnGap: '2rem', justifyContent: 'space-evenly'}}>\n                                    <div>\n                                        <HeadingGlow size='xl' glow=\"#fdda00\"\n                                                     color={theme.colors.primary}>{ maxSupply }</HeadingGlow>\n                                        <Text>Total Supply</Text>\n                                    </div>\n                                    <div style={{minWidth: '5rem'}}>\n                                        <HeadingGlow size='xl' glow=\"#fdda00\"\n                                                     color={theme.colors.primary}>{maxSupply-totalSupply}</HeadingGlow>\n                                        <Text>Available NFTs</Text>\n                                    </div>\n                                    <div>\n                                        <HeadingGlow size='xl' glow=\"#fdda00\"\n                                                     color={theme.colors.primary}>{getBalanceNumber(toBigNumber(price))}</HeadingGlow>\n                                        <Text>Price</Text>\n                                    </div>\n                                </Flex>\n                            </Card>\n                            <br/>\n                            <Text>The number of PFP NFTs is fixed at 5,000 and purchase will only be available in\n                                2022</Text>\n                            <br/>\n                            <Heading>Hurry! Don't miss your chance to own a LIMITED EDITION MetaGaming NFT!</Heading>\n\n                            {/* <Btn disabled style={{margin: '3rem 0 5rem 0', padding: '2rem 5rem'}}>GO GET ONE! <Text style={{padding: '0 0 0.5rem 0'}}>&nbsp;👉</Text></Btn> */}\n                            {/*<Btn style={{margin: '3rem 0 5rem 0', padding: '1rem 0rem'}}>August 22, 2022 1:00 PM*/}\n                            {/*    UTC</Btn>*/}\n\n                            <Card>\n                                <div style={{padding: '1rem'}}>\n                                    <div style={{\n                                        display: 'grid',\n                                        gridTemplateColumns: '1fr 5fr',\n                                        gap: '2rem',\n                                        textAlign: 'left'\n                                    }}>\n                                        <Heading size='l' color={theme.colors.MGG_accent2}>Contact Address</Heading>\n                                        <Text>{nftAddress?? 'n/a'}</Text>\n\n                                        {/* <Heading size='l' color={theme.colors.MGG_accent2}>Token ID</Heading>\n                                        <Text>To be added</Text> */}\n\n                                        <Heading size='l' color={theme.colors.MGG_accent2}>Blockchain</Heading>\n                                        <Text>Ethereum</Text>\n                                    </div>\n                                </div>\n                            </Card>\n                        </div>\n                    </div>\n                </BgPage>\n            </Page>\n        </>\n    )\n}\n\nexport default NFTpage\n","import {useCallback, useEffect, useState} from 'react'\nimport {useWeb3React} from '@web3-react/core'\nimport {mint} from 'utils/callHelpers'\nimport {getMGGNftContract, getPFPNftContract} from \"../utils/contractHelpers\";\nimport useWeb3 from \"./useWeb3\";\nimport useRefresh from \"./useRefresh\";\n\nexport const useMint = (amount) => {\n    const {account, chainId} = useWeb3React()\n    const web3 = useWeb3()\n    const {fastRefresh} = useRefresh()\n    const contract = getPFPNftContract(chainId?.toString(), web3)\n    const handleMint = useCallback(async () => {\n        try {\n            const txHash = await mint(contract, account, amount);\n            return txHash\n        } catch (e) {\n            console.error(e)\n            return false\n        }\n    }, [account, contract, fastRefresh])\n\n    return {onMint: handleMint}\n}\n\nexport const useGetUserInfo = (address = undefined) => {\n    const [{\n        buyEnabled,\n        price,\n        currentPhase\n    }, setUserInfo] = useState({\n        buyEnabled: false,\n        price: '',\n        currentPhase: ''\n    })\n\n    const {fastRefresh} = useRefresh()\n    const {account, chainId} = useWeb3React()\n    const web3 = useWeb3()\n\n    const userAddress = address ?? account\n\n    useEffect(() => {\n        const fetchUserInfo = async () => {\n            const contract = getPFPNftContract(chainId?.toString(), web3)\n\n            const rawResults = await contract.methods.userInfo(userAddress).call()\n            setUserInfo({\n                buyEnabled: rawResults.buyEnabled,\n                price: rawResults.price,\n                currentPhase: rawResults.currentPhase,\n            })\n        }\n\n        if (account) {\n            fetchUserInfo()\n        }\n    }, [account, fastRefresh])\n\n    return {\n        buyEnabled,\n        price,\n        currentPhase\n    }\n}\nexport const useGetPublicInfo = () => {\n    const [{\n        nftAddress,\n        totalSupply,\n        maxSupply,\n        currentPhase,\n        price,\n        startTime,\n        endTime\n    }, setPFPInfo] = useState({\n        nftAddress: '',\n        totalSupply: 0,\n        maxSupply: 0,\n        currentPhase: '',\n        price: '',\n        startTime: '',\n        endTime: ''\n    })\n    const {chainId, account} = useWeb3React()\n    const web3 = useWeb3()\n    const fetchPublicInfo = useCallback(async () => {\n        const contract = getPFPNftContract(chainId?.toString(), account ? web3 : null)\n        const {\n            currentPhase,\n            price,\n            startTime,\n            endTime\n        } = await contract.methods.currentPhase().call()\n        const nftAdd = await contract.methods.MGGPFPContract().call()\n        const mggNftContract = getMGGNftContract(nftAdd, chainId?.toString(), web3)\n        const mSupply = await mggNftContract.methods.maxSupply().call()\n        const tSupply = await mggNftContract.methods.totalSupply().call()\n        setPFPInfo({\n            nftAddress: nftAdd,\n            totalSupply: tSupply,\n            maxSupply: mSupply,\n            currentPhase,\n            price,\n            startTime,\n            endTime\n        })\n    }, [])\n    useEffect(() => {\n        fetchPublicInfo().then(console.info);\n    }, [fetchPublicInfo, account])\n\n    return {\n        totalSupply,\n        maxSupply,\n        nftAddress,\n        currentPhase,\n        price,\n        startTime,\n        endTime\n    }\n}\n\n\n"],"names":["nftUtilities","Container","className","fontSize","bold","color","style","letterSpacing","Ol","map","text","Li","styled","theme","mediaQueries","md","Card","Btn","Button","InformativeButton","background","borderColor","colors","BgPage","padding","BGimage","HeadingGlow","Flex","Heading","glow","mint","tokenContract","account","amount","methods","buyNFT","send","from","value","on","tx","transactionHash","getWeb3NoAccount","chainId","web3","RPC_URL2","getRpcUrl","provider","Web3","timeout","getAddress","address","MAINNET_ETH_CHAIN_ID","getPFPNftAddress","getContract","abi","_web3","toString","eth","Contract","getPFPNftContract","mggExtAbi","getMGGNftContract","nftAddress","mggNftAbi","useWeb3React","library","refEth","useRef","web3NoAccount","useState","setweb3","useEffect","current","RefreshContext","React","slow","fast","useContext","fastRefresh","slowRefresh","setupNetwork","window","ethereum","parseInt","process","request","method","params","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","nodes","blockExplorerUrls","BASE_BSC_SCAN_URL","console","error","activate","deactivate","login","useCallback","connectorID","connector","connectorsByName","UnsupportedChainIdError","localStorage","removeItem","NoEthereumProviderError","NoBscProviderError","info","UserRejectedRequestErrorInjected","UserRejectedRequestErrorWalletConnect","WalletConnectConnector","walletConnectProvider","undefined","message","logout","getItem","props","customTitle","useAuth","onPresentConnectModal","useWalletModal","onClick","getOpenSeaUrl","tokenId","BIG_TEN","BigNumber","getBalanceAmount","dividedBy","getBalanceNumber","balance","toNumber","BadgesContainer","nftbg","BadgesDesc","DescText","InfoSection","ThemeContext","useWeb3","requestedMint","setRequestMint","buyEnabled","price","currentPhase","setUserInfo","useRefresh","userAddress","fetchUserInfo","contract","userInfo","call","rawResults","useGetUserInfo","toastSuccess","useToast","totalSupply","maxSupply","startTime","endTime","setPFPInfo","fetchPublicInfo","MGGPFPContract","nftAdd","mggNftContract","mSupply","tSupply","then","useGetPublicInfo","onMint","txHash","useMint","phase1Enabled","phase2Enabled","phase3Enabled","handleMint","utils","hexToNumber","events","raw","topics","tokenAddress","openSeaUrl","setTimeout","href","target","MGG_accent2","Page","position","zIndex","size","alignItems","justifyContent","margin","disabled","Utilities","display","width","height","maxHeight","src","NftsGif","flexFlow","columnGap","primary","minWidth","gridTemplateColumns","gap","textAlign"],"sourceRoot":""}